// This Pine Script™ code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Citation https://www.ireallytrade.com/newsletters/VIXFix.pdf
// Source https://github.com/joveteo/trading-view-scripts/tree/main/Larry%20Williams%20VixFix
// © iLanat8
//@version=6

indicator(title = "Larry Williams VixFix", shorttitle = "L.W VixFix", precision = 2)

// =============================================================================
// INPUT PARAMETERS
// =============================================================================

// Calculation Periods
length1 = input.int(title="Length 1", defval=22, minval=1, maxval=500, tooltip="Average number of trading days in 1 month. Controls short-term volatility calculation.")
length2 = input.int(title="Length 2", defval=66, minval=1, maxval=500, tooltip="Average number of trading days in 3 months. Controls medium-term volatility calculation.")
length3 = input.int(title="Length 3", defval=132, minval=1, maxval=500, tooltip="Average number of trading days in 6 months. Controls long-term volatility calculation.")

// Statistics Configuration
showTable = input.bool(title="Show Statistics Table", defval=true, group="Statistics", tooltip="Display/hide the statistics table. Disable for mobile or cleaner chart view.")
tradeDuration = input.int(title="Trade Duration (Days)", defval=30, minval=5, maxval=250, group="Statistics", tooltip="Number of trading days to wait before evaluating trade success. Default: 30 days (was 90 in original).")

// =============================================================================
// CORE CALCULATIONS
// =============================================================================

// VixFix calculations for Buy signals
buy1 = ((high - ta.lowest(close[1], length1)) / ta.lowest(close[1], length1)) * 100
buy2 = ((high - ta.lowest(close[1], length2)) / ta.lowest(close[1], length2)) * 100
buy3 = ((high - ta.lowest(close[1], length3)) / ta.lowest(close[1], length3)) * 100

// Inverse VixFix calculations for Sell signals
sell1 = ((low - ta.highest(close[1], length1)) / ta.highest(close[1], length1)) * 100
sell2 = ((low - ta.highest(close[1], length2)) / ta.highest(close[1], length2)) * 100
sell3 = ((low - ta.highest(close[1], length3)) / ta.highest(close[1], length3)) * 100

// =============================================================================
// STATISTICS TRACKING VARIABLES
// =============================================================================

// Table and tracking arrays
var table stats_table = na
var array<float> buy_entry_prices = array.new<float>()
var array<int> buy_entry_bars = array.new<int>()
var array<float> sell_entry_prices = array.new<float>()
var array<int> sell_entry_bars = array.new<int>()

// Performance counters
var int total_bars = 0
var int total_buy_trades = 0
var int buy_wins = 0
var int buy_losses = 0
var int total_sell_trades = 0
var int sell_wins = 0
var int sell_losses = 0

// =============================================================================
// SIGNAL DETECTION LOGIC
// =============================================================================

// Hierarchical signal detection to prevent duplicates
// Higher timeframes take precedence (132 > 66 > 22)
buy_signal_132 = buy3 < 0 and buy3[1] >= 0  // New signal on 132-day timeframe
buy_signal_66 = buy2 < 0 and buy2[1] >= 0 and not buy_signal_132  // New signal on 66-day, but not if 132 already triggered
buy_signal_22 = buy1 < 0 and buy1[1] >= 0 and not buy_signal_132 and not buy_signal_66  // New signal on 22-day, but not if others triggered

sell_signal_132 = sell3 > 0 and sell3[1] <= 0  // New signal on 132-day timeframe
sell_signal_66 = sell2 > 0 and sell2[1] <= 0 and not sell_signal_132  // New signal on 66-day, but not if 132 already triggered
sell_signal_22 = sell1 > 0 and sell1[1] <= 0 and not sell_signal_132 and not sell_signal_66  // New signal on 22-day, but not if others triggered

// Combined signals (no duplicates)
buy_signal = buy_signal_132 or buy_signal_66 or buy_signal_22
sell_signal = sell_signal_132 or sell_signal_66 or sell_signal_22

// =============================================================================
// TRADE TRACKING & STATISTICS
// =============================================================================

// Count total bars for percentage calculations
total_bars += 1

// Track Buy signals
if buy_signal
    array.push(buy_entry_prices, close)
    array.push(buy_entry_bars, bar_index)
    total_buy_trades += 1

// Track Sell signals
if sell_signal
    array.push(sell_entry_prices, close)
    array.push(sell_entry_bars, bar_index)
    total_sell_trades += 1

// Check for completed Buy trades (configurable duration)
if array.size(buy_entry_bars) > 0
    for i = array.size(buy_entry_bars) - 1 to 0
        entry_bar = array.get(buy_entry_bars, i)
        entry_price = array.get(buy_entry_prices, i)
        
        // Check if configured trading days have passed
        if bar_index - entry_bar >= tradeDuration
            if close > entry_price  // Price closed higher = win
                buy_wins += 1
            else  // Price closed lower = loss
                buy_losses += 1
            
            // Remove completed trade from tracking
            array.remove(buy_entry_bars, i)
            array.remove(buy_entry_prices, i)

// Check for completed Sell trades (configurable duration)
if array.size(sell_entry_bars) > 0
    for i = array.size(sell_entry_bars) - 1 to 0
        entry_bar = array.get(sell_entry_bars, i)
        entry_price = array.get(sell_entry_prices, i)
        
        // Check if configured trading days have passed
        if bar_index - entry_bar >= tradeDuration
            if close < entry_price  // Price closed lower = win for short
                sell_wins += 1
            else  // Price closed higher = loss for short
                sell_losses += 1
            
            // Remove completed trade from tracking
            array.remove(sell_entry_bars, i)
            array.remove(sell_entry_prices, i)

// =============================================================================
// STATISTICS TABLE DISPLAY
// =============================================================================

if barstate.islast and showTable
    // Delete existing table
    if not na(stats_table)
        table.delete(stats_table)
    
    // Calculate completed trades and percentages
    completed_buy_trades = buy_wins + buy_losses
    completed_sell_trades = sell_wins + sell_losses
    
    // Trade count percentages (based on total bars)
    buy_trade_rate = total_bars > 0 ? math.round((total_buy_trades / total_bars) * 100, 2) : 0.0
    sell_trade_rate = total_bars > 0 ? math.round((total_sell_trades / total_bars) * 100, 2) : 0.0
    
    // Win/Loss percentages (based on completed trades)
    buy_win_rate = completed_buy_trades > 0 ? math.round((buy_wins / completed_buy_trades) * 100, 2) : 0.0
    buy_loss_rate = completed_buy_trades > 0 ? math.round((buy_losses / completed_buy_trades) * 100, 2) : 0.0
    sell_win_rate = completed_sell_trades > 0 ? math.round((sell_wins / completed_sell_trades) * 100, 2) : 0.0
    sell_loss_rate = completed_sell_trades > 0 ? math.round((sell_losses / completed_sell_trades) * 100, 2) : 0.0
    
    // Create statistics table
    stats_table := table.new(position.top_right, 3, 5, bgcolor=color.white, border_width=1, frame_width=1, frame_color=color.gray)
    
    // Headers
    table.cell(stats_table, 0, 0, "VIX Fix Stats", text_color=color.black, text_size=size.normal, bgcolor=color.gray)
    table.cell(stats_table, 1, 0, "Buy", text_color=color.white, text_size=size.normal, bgcolor=color.green)
    table.cell(stats_table, 2, 0, "Sell", text_color=color.white, text_size=size.normal, bgcolor=color.red)
    
    // Total Count (Total bars in chart)
    table.cell(stats_table, 0, 1, "Total Bars:", text_color=color.black, text_size=size.small)
    table.cell(stats_table, 1, 1, str.tostring(total_bars), text_color=color.black, text_size=size.small)
    table.cell(stats_table, 2, 1, str.tostring(total_bars), text_color=color.black, text_size=size.small)
    
    // Trade Count (with percentage of total bars)
    table.cell(stats_table, 0, 2, "Signals:", text_color=color.black, text_size=size.small)
    table.cell(stats_table, 1, 2, str.tostring(total_buy_trades) + " (" + str.tostring(buy_trade_rate, "#.##") + "%)", text_color=color.black, text_size=size.small)
    table.cell(stats_table, 2, 2, str.tostring(total_sell_trades) + " (" + str.tostring(sell_trade_rate, "#.##") + "%)", text_color=color.black, text_size=size.small)
    
    // Profit (with percentage of completed trades)
    table.cell(stats_table, 0, 3, "Profit:", text_color=color.black, text_size=size.small)
    table.cell(stats_table, 1, 3, str.tostring(buy_wins) + " (" + str.tostring(buy_win_rate, "#.##") + "%)", text_color=color.green, text_size=size.small)
    table.cell(stats_table, 2, 3, str.tostring(sell_wins) + " (" + str.tostring(sell_win_rate, "#.##") + "%)", text_color=color.green, text_size=size.small)
    
    // Loss (with percentage of completed trades)
    table.cell(stats_table, 0, 4, "Loss:", text_color=color.black, text_size=size.small)
    table.cell(stats_table, 1, 4, str.tostring(buy_losses) + " (" + str.tostring(buy_loss_rate, "#.##") + "%)", text_color=color.red, text_size=size.small)
    table.cell(stats_table, 2, 4, str.tostring(sell_losses) + " (" + str.tostring(sell_loss_rate, "#.##") + "%)", text_color=color.red, text_size=size.small)

// =============================================================================
// VISUAL DISPLAY & STYLING
// =============================================================================

// Zero reference line
hline(0, "Zero Line", color=color.white, linewidth=1)

// VixFix Buy signal plots - Green shades
plot(buy1, title="Buy Short (22d)", color=color.new(color.green, 60), linewidth=1)
plot(buy2, title="Buy Medium (66d)", color=color.new(color.green, 50), linewidth=1)
plot(buy3, title="Buy Long (132d)", color=color.new(color.green, 40), linewidth=1)

// Inverse VixFix Sell signal plots - Red shades
plot(sell1, title="Sell Short (22d)", color=color.new(color.red, 60), linewidth=1)
plot(sell2, title="Sell Medium (66d)", color=color.new(color.red, 50), linewidth=1)
plot(sell3, title="Sell Long (132d)", color=color.new(color.red, 40), linewidth=1)

// Background intensity coloring based on signal strength
buy_count = (buy1 < 0 ? 1 : 0) + (buy2 < 0 ? 1 : 0) + (buy3 < 0 ? 1 : 0)
sell_count = (sell1 > 0 ? 1 : 0) + (sell2 > 0 ? 1 : 0) + (sell3 > 0 ? 1 : 0)

// Dynamic background color based on signal intensity
bg_color = buy_count == 1 ? color.new(color.green, 85) : 
           buy_count == 2 ? color.new(color.green, 75) : 
           buy_count == 3 ? color.new(color.green, 65) : 
           sell_count == 1 ? color.new(color.red, 85) : 
           sell_count == 2 ? color.new(color.red, 75) : 
           sell_count == 3 ? color.new(color.red, 65) : na

bgcolor(bg_color, title="Signal Intensity Background")
